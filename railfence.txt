class RailFenceCipherHelper {
  // Encodes a message using Rail Fence Cipher
  String encode(String msg, int depth) {
    int len = msg.length();
    char[][] mat = new char[depth][len];
    int row = 0, col = 0;
    for (char c : msg.toCharArray()) {
      mat[row][col++] = c;
      row = (row + 1) % depth;
    }
    StringBuilder enc = new StringBuilder();
    for (char[] rowArray : mat) {
      for (char c : rowArray) {
        if (c != '\u0006') {
          enc.append(c);
        }
      }
    }
    return enc.toString();
  }

  // Decodes an encoded message using Rail Fence Cipher
  String decode(String encmsg, int depth) {
    int len = encmsg.length();
    char[][] mat = new char[depth][len];
    int row = 0, col = 0;
    for (int i = 0; i < len; i++) {
      mat[row][col++] = ' '; // Initialize with a placeholder
      row = (row + 1) % depth;
    }
    int index = 0;
    for (int i = 0; i < depth; i++) {
      for (int j = 0; j < len; j++) {
        if (mat[i][j] == ' ' && index < len) {
          mat[i][j] = encmsg.charAt(index++);
        }
      }
    }
    StringBuilder dec = new StringBuilder();
    row = 0;
    for (int i = 0; i < len; i++) {
      dec.append(mat[row][i]);
      row = (row + 1) % depth;
    }
    return dec.toString();
  }
}

public class RailFenceCipher {
  public static void main(String[] args) {
    RailFenceCipherHelper rf = new RailFenceCipherHelper();
    String msg = "Anna University, Chennai";
    int depth = 2;
    String enc = rf.encode(msg, depth);
    String dec = rf.decode(enc, depth);
    // Display the results
    System.out.println("Simulating Rail Fence Cipher\n--");
    System.out.println("Input Message : " + msg);
    System.out.println("Encrypted Message  : " + enc);
    System.out.println("Decrypted Message : " + dec);
  }
}
